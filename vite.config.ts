import { TanStackRouterVite as router } from '@tanstack/router-plugin/vite'
import react from '@vitejs/plugin-react'
import { readFile, writeFile } from 'fs/promises'
import { basename, resolve } from 'path'
import { defineConfig, PluginOption } from 'vite'

type Options = {
    extension: 'js' | 'ts'
    target: string
    only?: string[]
    exclude?: string[]
}

function exportPackageJson(overrides: Partial<Options> = {}): PluginOption {
    const options: Options = {
        extension: 'ts',
        target: 'src/package',
        ...overrides,
    }

    const shouldHandle = (file: string) => basename(file) === 'package.json'
    const write = async () => {
        const json = await readFile('package.json', { encoding: 'utf-8' })
        const data = JSON.parse(json)

        if (options.only) {
            for (const key in data) {
                if (!options.only.includes(key)) {
                    delete data[key]
                }
            }
        } else if (options.exclude) {
            for (const toDelete of options.exclude) {
                delete data[toDelete]
            }
        }

        const content = `
/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by vite-plugin-package-export

const pkg = ${JSON.stringify(data, null, 4)} as const

export default pkg
        `

        await writeFile(`${options.target}.gen.${options.extension}`, content, {
            encoding: 'utf-8',
        })
    }

    return {
        name: 'export-package-json',

        async buildStart() {
            await write()
        },
        async watchChange(file) {
            if (!shouldHandle(file)) {
                return
            }

            await write()
        },
    }
}

// https://vitejs.dev/config/
export default defineConfig({
    plugins: [
        router({
            semicolons: false,
            quoteStyle: 'single',
        }),
        react(),

        exportPackageJson({
            only: ['name', 'description', 'version'],
        }),
    ],
    resolve: {
        alias: {
            '@': resolve('./src'),
        },
    },
    build: {
        rollupOptions: {
            output: {
                manualChunks: {
                    'react': [
                        'react',
                        'react-dom',
                    ],
                    'fontawesome': [
                        '@fortawesome/fontawesome-svg-core',
                        '@fortawesome/free-brands-svg-icons',
                        '@fortawesome/free-solid-svg-icons',
                        '@fortawesome/react-fontawesome',
                    ],
                    'shadcn-ui': [
                        '@hookform/resolvers',
                        '@radix-ui/react-alert-dialog',
                        '@radix-ui/react-dialog',
                        '@radix-ui/react-icons',
                        '@radix-ui/react-label',
                        '@radix-ui/react-menubar',
                        '@radix-ui/react-popover',
                        '@radix-ui/react-scroll-area',
                        '@radix-ui/react-select',
                        '@radix-ui/react-slot',
                        '@radix-ui/react-toast',
                        '@radix-ui/react-tooltip',
                        '@tanstack/react-query',
                        '@tanstack/react-router',
                        'class-variance-authority',
                        'clsx',
                        'react-hook-form',
                        'tailwind-merge',
                        'tailwindcss-animate',
                    ],
                    mjml: [
                        'mjml-browser',
                    ],
                },
            },
        },
    },
})
